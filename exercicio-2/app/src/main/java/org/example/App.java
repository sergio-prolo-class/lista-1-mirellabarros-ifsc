/*
 * This source file was generated by the Gradle 'init' task
 */
package org.example;

import java.lang.Math;

public class App {
    public boolean validacao(String[] argumentos, String[] cores) {
        boolean resultadoValidacao = true;
        // Verifica se o usuário informou 3 ou 4 parâmetros
        if (argumentos.length == 3 || argumentos.length == 4) {
            // Verifica se as cores fornecidas pelo usuário são válidas
            for (String argumento : argumentos) {
                for (String cor : cores) {
                    resultadoValidacao = argumento.equals(cor);
                    if (resultadoValidacao) {
                        break;
                    }
                }
            }
        } else {
            resultadoValidacao = false;
        }
        return resultadoValidacao;
    }

    public static void main(String[] args) {

        // Inicializa um vetor com as cores possíveis para as faixas do resistor
        String[] cores = {
                "preto",
                "marrom",
                "vermelho",
                "laranja",
                "amarelo",
                "verde",
                "azul",
                "violeta",
                "cinza",
                "branco",
                "ouro",
                "prata"
        };

        // Valida os argumentos fornecidos pelo usuário.
        boolean validacao = new App().validacao(args, cores);
        if (!validacao) {
            System.out.println("Parâmetros incorretos.");
            return;
        }

        // Considerando os parâmetros corretos...
        // Inicializa um vetor para armazenar os com valores correspondentes a cada cor
        int[] resistor = {-1, -1, -1, -1};

        // Inicializa um vetor com o fator multiplicador
        double[] vetorMultiplicador = {
                Math.pow(10, 0),
                Math.pow(10, 1),
                Math.pow(10, 2),
                Math.pow(10, 3),
                Math.pow(10, 4),
                Math.pow(10, 5),
                Math.pow(10, 6),
                Math.pow(10, 7),
                Math.pow(10, 8),
                Math.pow(10, 9),
                Math.pow(10, -1),
                Math.pow(10, -2)
        };

        // Inicializa um vetor com a tolerância. Os códigos ausentes são representados com -1
        double[] vetorTolerancia = {0, 1, 2, -1, -1, 0.5, 0.25, 0.1, 0.05, -1, 5, 10};

        // Inicializa um vetor com as abreviações da notação científica
        String[] vetorAbreviacoes = {"", "K", "M", "G", "T", "", "", "", "", "", "da", "c"};

        // Relaciona as cores aos valores e salva no vetor resistor
        for (int i = 0; i < args.length; i++) {
            for (int j = 0; j < cores.length; j++) {
                if (args[i].equals(cores[j])) {
                    resistor[i] = j;
                    break;
                }
            }
        }

        // Verifica se o usuário inseriu a quarta faixa para determinar a tolerância
        double tolerancia;
        if (args.length == 3) {
            tolerancia = 20.0;
        } else {
            tolerancia = vetorTolerancia[resistor[3]];
        }

        // Converte os 2 primeiros valores em string e salva na variável valorInicial
        String valorInicial = Integer.toString(resistor[0]) + Integer.toString(resistor[1]);
        // Converte a variável valorInicial para double e aplica o fator multiplicador
        double resistencia = Integer.parseInt(valorInicial) * vetorMultiplicador[resistor[2]];

        // Calcula o produto notável
        int contador = 0;
        if (resistencia >= 1000) {
            while (resistencia >= 1000) {
                resistencia = resistencia / 1000;
                contador++;
            }
        }

        if (resistor[2] >= 10) {
            contador = 9;
            while (resistencia <= 10) {
                resistencia = resistencia * 10;
                contador++;
            }
        }

        // Separa os valores da resistência e da tolerância pelo ponto da casa decimal
        String[] vetorResistenciaFinal = Double.toString(resistencia).split("\\.");
        String[] vetorToleranciaFinal = Double.toString(tolerancia).split("\\.");

        // Monta parte do resultado para o usuário inserindo a vírgula como separador decimal
        String stringResultadoP1 = vetorResistenciaFinal[1].equals("0") ? vetorResistenciaFinal[0] : vetorResistenciaFinal[0] + "," + vetorResistenciaFinal[1];
        String stringResultadoP2 = vetorToleranciaFinal[1].equals("0") ? vetorToleranciaFinal[0] : vetorToleranciaFinal[0] + "," + vetorToleranciaFinal[1];

        // Escreve o resultado final na tela
        System.out.println(stringResultadoP1 + " " + vetorAbreviacoes[contador] + " Ohms (+- " + stringResultadoP2 + "%)");

    }
}
